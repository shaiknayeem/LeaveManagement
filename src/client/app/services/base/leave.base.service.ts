/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  FOR CUSTOMIZE LeaveBaseService PLEASE EDIT ../Leave.service.ts
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
 
//DEPENDENCIES
import { Observable } from 'rxjs/Rx';
import { Http, RequestOptions, Headers, Response } from '@angular/http';
import { Injectable } from '@angular/core';
import 'rxjs/add/operator/map';

// SECURITY
import { AuthenticationService } from '../../security/authentication.service';

// MODEL
import { Leave } from '../../domain/leave-management_db/leave';

// CONFIG
import { config } from "../../../config/properties";

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../Leave.service.ts
 */
 
/*
 * SCHEMA DB Leave
 * 
	{
		cancel: {
			type: 'Boolean'
		},
		fromDate: {
			type: 'Date'
		},
		reason: {
			type: 'String'
		},
		status: {
			type: 'String'
		},
		toDate: {
			type: 'Date'
		},
		type: {
			type: 'String'
		},
		//RELATIONS
		
		
		//EXTERNAL RELATIONS
		
		leave: {
			type: Schema.ObjectId,
			ref : "User"
		},
		
	}
 * 
 */
@Injectable()
export class LeaveBaseService {

    contextUrl:string = config.host + "/leaves";
    constructor(
        protected http: Http,
        protected authenticationService: AuthenticationService) {
        
    }

//CRUD METHODS
	
	/**
     * Create new item
     */
     create(item: Leave): Observable<Leave> {
        return this.http
            .post(this.contextUrl, item)
            .map(response => response.json());
    }
	
	/**
     * Remove one item by id
     */
     remove(id: string): Observable<void> {
        return this.http
            .delete(this.contextUrl + "/" + id)
            .map(response => null);
    }
	
    /**
     * Get one item by id
     */
	
	get(id: string): Observable<Leave> {
        return this.http
            .get(this.contextUrl + "/" + id)
            .map(response => response.json() as Leave)
    }

	
    /**
     * Get list of items
     */
	
	list(): Observable<Leave[]> {
        return this.http
            .get(this.contextUrl)
            .map(response => response.json() as Leave[])
    }
	
    /**
     * Update item
     */
	update(item: Leave): Observable<Leave> {
        return this.http
            .post(this.contextUrl + '/' + item._id, item)
            .map(response => response.json())
    }



}
